{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to gns3fy Docs! gns3fy is a Python wrapper around GNS3 Server API . Its main objective is to interact with the GNS3 server in a programatic way, so it can be integrated with the likes of Ansible, docker and scripts. Use cases Here are some examples where gns3fy is used in a programmatic way: Ansible-collection-gns3 : Useful for CI/CD pipelines to interact with GNS3 server using Ansible. It can create/delete projects, nodes and links in an ansible playbook. Terraform: Coming soon... (although it might be a Go version of it) Migrate templates between GNS3 servers Check server usage before turning up resource-hungry nodes Manipulate project snapshots like create, delete or list the snapshots configured for the project. Install pip install gns3fy Development version Use poetry to install the package when cloning it. Quick Start >>> import gns3fy # Define the server object to establish the connection >>> gns3_server = gns3fy.Gns3Connector(\"http://<server address>:3080\") # Define the lab you want to load and assign the server connector >>> lab = gns3fy.Project(name=\"API_TEST\", connector=gns3_server) # Retrieve its information and display >>> lab.get() >>> print(lab) \"Project(project_id='4b21dfb3-675a-4efa-8613-2f7fb32e76fe', name='API_TEST', status='opened', ...)\" # Access the project attributes >>> print(f\"Name: {lab.name} -- Status: {lab.status} -- Is auto_closed?: {lab.auto_close}\") \"Name: API_TEST -- Status: closed -- Is auto_closed?: False\" # Open the project >>> lab.open() >>> lab.status opened # Verify the stats >>> lab.stats {'drawings': 0, 'links': 4, 'nodes': 6, 'snapshots': 0} # List the names and status of all the nodes in the project >>> for node in lab.nodes: ... print(f\"Node: {node.name} -- Node Type: {node.node_type} -- Status: {node.status}\") \"Node: Ethernetswitch-1 -- Node Type: ethernet_switch -- Status: started\" ... Release Notes Please see the Release Notes for details","title":"Overview"},{"location":"#use-cases","text":"Here are some examples where gns3fy is used in a programmatic way: Ansible-collection-gns3 : Useful for CI/CD pipelines to interact with GNS3 server using Ansible. It can create/delete projects, nodes and links in an ansible playbook. Terraform: Coming soon... (although it might be a Go version of it) Migrate templates between GNS3 servers Check server usage before turning up resource-hungry nodes Manipulate project snapshots like create, delete or list the snapshots configured for the project.","title":"Use cases"},{"location":"#install","text":"pip install gns3fy","title":"Install"},{"location":"#development-version","text":"Use poetry to install the package when cloning it.","title":"Development version"},{"location":"#quick-start","text":">>> import gns3fy # Define the server object to establish the connection >>> gns3_server = gns3fy.Gns3Connector(\"http://<server address>:3080\") # Define the lab you want to load and assign the server connector >>> lab = gns3fy.Project(name=\"API_TEST\", connector=gns3_server) # Retrieve its information and display >>> lab.get() >>> print(lab) \"Project(project_id='4b21dfb3-675a-4efa-8613-2f7fb32e76fe', name='API_TEST', status='opened', ...)\" # Access the project attributes >>> print(f\"Name: {lab.name} -- Status: {lab.status} -- Is auto_closed?: {lab.auto_close}\") \"Name: API_TEST -- Status: closed -- Is auto_closed?: False\" # Open the project >>> lab.open() >>> lab.status opened # Verify the stats >>> lab.stats {'drawings': 0, 'links': 4, 'nodes': 6, 'snapshots': 0} # List the names and status of all the nodes in the project >>> for node in lab.nodes: ... print(f\"Node: {node.name} -- Node Type: {node.node_type} -- Status: {node.status}\") \"Node: Ethernetswitch-1 -- Node Type: ethernet_switch -- Status: started\" ...","title":"Quick Start"},{"location":"#release-notes","text":"Please see the Release Notes for details","title":"Release Notes"},{"location":"api_reference/","text":"Gns3Connector class Gns3Connector(): __init__(self, url=None, user=None, cred=None, verify=False, api_version=2) Connector to be use for interaction against GNS3 server controller API. Attributes: url (str): URL of the GNS3 server ( required ) user (str): User used for authentication cred (str): Password used for authentication verify (bool): Whether or not to verify SSL api_version (int): GNS3 server REST API version api_calls : Counter of amount of http_calls has been performed base_url : url passed + api_version session : Requests Session object Returns: Gns3Connector instance Example: >>> server = Gns3Connector(url=\"http://<address>:3080\") >>> print(server.get_version()) {'local': False, 'version': '2.2.0b4'} http_call http_call(self, method, url, data=None, json_data=None, headers=None, verify=False, params=None) Performs the HTTP operation actioned Required Attributes: method (enum): HTTP method to perform: get, post, put, delete, head, patch ( required ) url (str): URL target ( required ) data : Dictionary or byte of request body data to attach to the Request json_data : Dictionary or List of dicts to be passed as JSON object/array headers : ictionary of HTTP Headers to attach to the Request verify : SSL Verification params : Dictionary or bytes to be sent in the query string for the Request get_version get_version(self) Returns the version information of GNS3 server projects_summary projects_summary(self, is_print=True) Returns a summary of the projects in the server. If is_print is False , it will return a list of tuples like: [(name, project_id, total_nodes, total_links, status) ...] get_projects get_projects(self) Returns the list of the projects on the server get_project get_project(self, name=None, project_id=None) Retrieves a project from either a name or ID Required Attributes: name or project_id templates_summary templates_summary(self, is_print=True) Returns a summary of the templates in the server. If is_print is False , it will return a list of tuples like: [(name, template_id, template_type, builtin, console_type, category) ...] get_templates get_templates(self) Returns the templates defined on the server. get_template get_template(self, name=None, template_id=None) Retrieves a template from either a name or ID Required Attributes: name or template_id update_template update_template(self, name=None, template_id=None, **kwargs) Updates a template by giving its name or UUID. For more information [API INFO] (http://api.gns3.net/en/2.2/api/v2/controller/template/ templatestemplateid.html#put-v2-templates-template-id) Required Attributes: name or template_id create_template create_template(self, **kwargs) Creates a template by giving its attributes. For more information [API INFO] (http://api.gns3.net/en/2.2/api/v2/controller/template/ templates.html#post-v2-templates) Required Attributes: name compute_id by default is 'local' template_type delete_template delete_template(self, name=None, template_id=None) Deletes a template by giving its attributes. For more information [API INFO] (http://api.gns3.net/en/2.2/api/v2/controller/template/ templatestemplateid.html#id16) Required Attributes: name or template_id get_nodes get_nodes(self, project_id) Retieves the nodes defined on the project Required Attributes: project_id get_node get_node(self, project_id, node_id) Returns the node by locating its ID. Required Attributes: project_id node_id get_links get_links(self, project_id) Retrieves the links defined in the project. Required Attributes: project_id get_link get_link(self, project_id, link_id) Returns the link by locating its ID. Required Attributes: project_id link_id create_project create_project(self, **kwargs) Pass a dictionary type object with the project parameters to be created. Required Attributes: name Returns JSON project information delete_project delete_project(self, project_id) Deletes a project from server. Required Attributes: project_id get_computes get_computes(self) Returns a list of computes. Returns: List of dictionaries of the computes attributes like cpu/memory usage get_compute get_compute(self, compute_id=\"local\") Returns a compute. Returns: Dictionary of the compute attributes like cpu/memory usage get_compute_images get_compute_images(self, emulator, compute_id=\"local\") Returns a list of images available for a compute. Required Attributes: emulator : the likes of 'qemu', 'iou', 'docker' ... compute_id By default is 'local' Returns: List of dictionaries with images available for the compute for the specified emulator upload_compute_image upload_compute_image(self, emulator, file_path, compute_id=\"local\") uploads an image for use by a compute. Required Attributes: emulator : the likes of 'qemu', 'iou', 'docker' ... file_path : path of file to be uploaded compute_id By default is 'local' get_compute_ports get_compute_ports(self, compute_id=\"local\") Returns ports used and configured by a compute. Required Attributes: compute_id By default is 'local' Returns: Dictionary of console_ports used and range, as well as the udp_ports Link class Link() GNS3 Link API object. For more information visit: Links Endpoint API information Attributes: link_id (str): Link UUID ( required to be set when using get method) link_type (enum): Possible values: ethernet, serial project_id (str): Project UUID ( required ) connector (object): Gns3Connector instance used for interaction ( required ) suspend (bool): Suspend the link nodes (list): List of the Nodes and ports ( required when using create method, see Features/Link creation on the docs) filters (dict): Packet filter. This allow to simulate latency and errors capturing (bool): Read only property. True if a capture running on the link capture_file_path (str): Read only property. The full path of the capture file if capture is running capture_file_name (str): Read only property. The name of the capture file if capture is running Returns: Link instance Example: >>> link = Link(project_id=<pr_id>, link_id=<link_id> connector=<Gns3Connector instance>) >>> link.get() >>> print(link.link_type) 'ethernet' get @verify_connector_and_id get(self) Retrieves the information from the link endpoint. Required Attributes: project_id connector link_id delete @verify_connector_and_id delete(self) Deletes a link endpoint from the project. It sets to None the attributes link_id when executed sucessfully Required Attributes: project_id connector link_id create create(self) Creates a link endpoint Required Attributes: project_id connector nodes Node class Node() GNS3 Node API object. For more information visit: Node Endpoint API information Attributes: name (str): Node name ( required when using create method) project_id (str): Project UUID ( required ) node_id (str): Node UUID ( required when using get method) compute_id (str): Compute identifier ( required , default=local) node_type (enum): frame_relay_switch, atm_switch, docker, dynamips, vpcs, traceng, virtualbox, vmware, iou, qemu ( required when using create method) connector (object): Gns3Connector instance used for interaction ( required ) template_id : Template UUID from the which the node is from. template : Template name from the which the node is from. node_directory (str): Working directory of the node. Read only status (enum): Possible values: stopped, started, suspended ports (list): List of node ports, READ only port_name_format (str): Formating for port name {0} will be replace by port number port_segment_size (int): Size of the port segment first_port_name (str): Name of the first port properties (dict): Properties specific to an emulator locked (bool): Whether the element locked or not label (dict): TBC console (int): Console TCP port console_host (str): Console host console_auto_start (bool): Automatically start the console when the node has started command_line (str): Command line use to start the node custom_adapters (list): TBC height (int): Height of the node, READ only width (int): Width of the node, READ only symbol (str): Symbol of the node x (int): X position of the node y (int): Y position of the node `z (int): Z position of the node Returns: Node instance Example: >>> alpine = Node(name=\"alpine1\", node_type=\"docker\", template=\"alpine\", project_id=<pr_id>, connector=<Gns3Connector instance>) >>> alpine.create() >>> print(alpine.node_id) 'SOME-UUID-GENERATED' get @verify_connector_and_id get(self, get_links=True) Retrieves the node information. When get_links is True it also retrieves the links respective to the node. Required Attributes: project_id connector node_id get_links @verify_connector_and_id get_links(self) Retrieves the links of the respective node. They will be saved at the links attribute Required Attributes: project_id connector node_id start @verify_connector_and_id start(self) Starts the node. Required Attributes: project_id connector node_id stop @verify_connector_and_id stop(self) Stops the node. Required Attributes: project_id connector node_id reload @verify_connector_and_id reload(self) Reloads the node. Required Attributes: project_id connector node_id suspend @verify_connector_and_id suspend(self) Suspends the node. Required Attributes: project_id connector node_id update @verify_connector_and_id update(self, **kwargs) Updates the node instance by passing the keyword arguments of the attributes you want updated Example: router01.update(name=\"router01-CSX\") This will update the project auto_close attribute to True Required Attributes: project_id connector create create(self) Creates a node. By default it will fetch the nodes properties for creation based on the template or template_id attribute supplied. This can be overriden/updated by sending a dictionary of the properties under extra_properties . Required Node instance attributes: project_id connector compute_id : Defaults to \"local\" template or template_id - if not passed as arguments delete @verify_connector_and_id delete(self) Deletes the node from the project. It sets to None the attributes node_id and name when executed successfully Required Attributes: project_id connector node_id get_file @verify_connector_and_id get_file(self, path) Retrieve a file in the node directory. Required Attributes: project_id connector path : Node's relative path of the file write_file @verify_connector_and_id write_file(self, path, data) Places a file content on a specified node file path. Used mainly for docker images. Example to update an alpine docker network interfaces: >>> data = ''' auto eth0 iface eth0 inet dhcp ''' >>> alpine_node.write_file(path='/etc/network/interfaces', data=data) Required Attributes: project_id connector path : Node's relative path of the file data : Data to be included in the file Project class Project() GNS3 Project API object. For more information visit: Project Endpoint API information Attributes: name : Project name ( required when using create method) project_id (str): Project UUID ( required ) connector (object): Gns3Connector instance used for interaction ( required ) status (enum): Possible values: opened, closed path (str): Path of the project on the server filename (str): Project filename auto_start (bool): Project start when opened auto_close (bool): Project auto close when client cut off the notifications feed auto_open (bool): Project open when GNS3 start drawing_grid_size (int): Grid size for the drawing area for drawings grid_size (int): Grid size for the drawing area for nodes scene_height (int): Height of the drawing area scene_width (int): Width of the drawing area show_grid (bool): Show the grid on the drawing area show_interface_labels (bool): Show interface labels on the drawing area show_layers (bool): Show layers on the drawing area snap_to_grid (bool): Snap to grid on the drawing area supplier (dict): Supplier of the project variables (list): Variables required to run the project zoom (int): Zoom of the drawing area stats (dict): Project stats -. drawings (list): List of drawings present on the project nodes (list): List of Node instances present on the project links (list): List of Link instances present on the project Returns: Project instance Example: >>> lab = Project(name=\"lab\", connector=<Gns3Connector instance>) >>> lab.create() >>> print(lab.status) 'opened' get get(self, get_links=True, get_nodes=True, get_stats=True) Retrieves the projects information. get_links : When true it also queries for the links inside the project get_nodes : When true it also queries for the nodes inside the project get_stats : When true it also queries for the stats inside the project It get_stats is set to True , it also verifies if snapshots and drawings are inside the project and stores them in their respective attributes ( snapshots and drawings ) Required Attributes: connector project_id or name create create(self) Creates the project. Required Attributes: name connector update @verify_connector_and_id update(self, **kwargs) Updates the project instance by passing the keyword arguments of the attributes you want updated Example: lab.update(auto_close=True) This will update the project auto_close attribute to True Required Attributes: project_id connector delete @verify_connector_and_id delete(self) Deletes the project from the server. It sets to None the attributes project_id and name when executed successfully Required Attributes: project_id connector close @verify_connector_and_id close(self) Closes the project on the server. Required Attributes: project_id connector open @verify_connector_and_id open(self) Opens the project on the server. Required Attributes: project_id connector get_stats @verify_connector_and_id get_stats(self) Retrieve the stats of the project. Required Attributes: project_id connector get_file @verify_connector_and_id get_file(self, path) Retrieve a file in the project directory. Beware you have warranty to be able to access only to file global to the project. Required Attributes: project_id connector path : Project's relative path of the file write_file @verify_connector_and_id write_file(self, path, data) Places a file content on a specified project file path. Beware you have warranty to be able to access only to file global to the project. Example to create a README.txt for the project: >>> data = ''' This is a README description! ''' >>> project.write_file(path='README.txt', data=data) Required Attributes: project_id connector path : Project's relative path of the file data : Data to be included in the file get_nodes @verify_connector_and_id get_nodes(self) Retrieve the nodes of the project. Required Attributes: project_id connector get_links @verify_connector_and_id get_links(self) Retrieve the links of the project. Required Attributes: project_id connector start_nodes @verify_connector_and_id start_nodes(self, poll_wait_time=5) Starts all the nodes inside the project. poll_wait_time is used as a delay when performing the next query of the nodes status. Required Attributes: project_id connector stop_nodes @verify_connector_and_id stop_nodes(self, poll_wait_time=5) Stops all the nodes inside the project. poll_wait_time is used as a delay when performing the next query of the nodes status. Required Attributes: project_id connector reload_nodes @verify_connector_and_id reload_nodes(self, poll_wait_time=5) Reloads all the nodes inside the project. poll_wait_time is used as a delay when performing the next query of the nodes status. Required Attributes: project_id connector suspend_nodes @verify_connector_and_id suspend_nodes(self, poll_wait_time=5) Suspends all the nodes inside the project. poll_wait_time is used as a delay when performing the next query of the nodes status. Required Attributes: project_id connector nodes_summary nodes_summary(self, is_print=True) Returns a summary of the nodes insode the project. If is_print is False , it will return a list of tuples like: [(node_name, node_status, node_console, node_id) ...] Required Attributes: project_id connector nodes_inventory nodes_inventory(self) Returns an inventory-style dictionary of the nodes Example: { \"router01\": { \"server\": \"127.0.0.1\", \"name\": \"router01\", \"console_port\": 5077, \"type\": \"vEOS\" } } Required Attributes: project_id connector links_summary links_summary(self, is_print=True) Returns a summary of the links insode the project. If is_print is False, it will return a list of tuples like: [(node_a, port_a, node_b, port_b) ...] Required Attributes: project_id connector get_node get_node(self, name=None, node_id=None) Returns the Node object by searching for the name or the node_id . Required Attributes: project_id connector Required keyword arguments: - name or node_id NOTE: Run method get_nodes() manually to refresh list of nodes if necessary get_link get_link(self, link_id) Returns the Link object by locating its ID Required Attributes: project_id connector link_id NOTE: Run method get_links() manually to refresh list of links if necessary create_node create_node(self, **kwargs) Creates a node. To know available parameters see Node object, specifically the create method. The most basic example would be: project.create_node(name='test-switch01', template='Ethernet switch') Required Project instance attributes: project_id connector Required keyword aguments: template or template_id create_link create_link(self, node_a, port_a, node_b, port_b) Creates a link. Required Attributes: project_id connector node_a : Node name of the A side port_a : Port name of the A side (must match the name attribute of the port) node_b : Node name of the B side port_b : Port name of the B side (must match the name attribute of the port) get_snapshots @verify_connector_and_id get_snapshots(self) Retrieves list of snapshots of the project Required Project instance attributes: project_id connector get_snapshot get_snapshot(self, name=None, snapshot_id=None) Returns the Snapshot by searching for the name or the snapshot_id . Required Attributes: project_id connector Required keyword arguments: - name or snapshot_id create_snapshot @verify_connector_and_id create_snapshot(self, name) Creates a snapshot of the project Required Project instance attributes: project_id connector Required keyword aguments: name delete_snapshot @verify_connector_and_id delete_snapshot(self, name=None, snapshot_id=None) Deletes a snapshot of the project Required Project instance attributes: project_id connector Required keyword aguments: name or snapshot_id restore_snapshot @verify_connector_and_id restore_snapshot(self, name=None, snapshot_id=None) Restore a snapshot from disk Required Project instance attributes: project_id connector Required keyword aguments: name or snapshot_id arrange_nodes_circular arrange_nodes_circular(self, radius=120) Re-arrgange the existing nodes in a circular fashion Attributes: project instance created Example >>> proj = Project(name='project_name', connector=Gns3connector) >>> proj.arrange_nodes() get_drawing get_drawing(self, drawing_id=None) Returns the drawing by searching for the svg or the drawing_id . Required Attributes: project_id connector Required keyword arguments: - svg or drawing_id get_drawings @verify_connector_and_id get_drawings(self) Retrieves list of drawings of the project Required Project instance attributes: project_id connector create_drawing @verify_connector_and_id create_drawing(self, svg, locked=False, x=10, y=10, z=1) Creates a drawing on the project Required Project instance attributes: project_id connector update_drawing @verify_connector_and_id update_drawing(self, drawing_id, svg=None, locked=None, x=None, y=None, z=None) Updates a drawing on the project Required Project instance attributes: project_id connector delete_drawing @verify_connector_and_id delete_drawing(self, drawing_id=None) Deletes a drawing of the project Required Project instance attributes: project_id connector Required keyword aguments: drawing_id","title":"API Reference"},{"location":"api_reference/#http_call","text":"http_call(self, method, url, data=None, json_data=None, headers=None, verify=False, params=None) Performs the HTTP operation actioned Required Attributes: method (enum): HTTP method to perform: get, post, put, delete, head, patch ( required ) url (str): URL target ( required ) data : Dictionary or byte of request body data to attach to the Request json_data : Dictionary or List of dicts to be passed as JSON object/array headers : ictionary of HTTP Headers to attach to the Request verify : SSL Verification params : Dictionary or bytes to be sent in the query string for the Request","title":"http_call"},{"location":"api_reference/#get_version","text":"get_version(self) Returns the version information of GNS3 server","title":"get_version"},{"location":"api_reference/#projects_summary","text":"projects_summary(self, is_print=True) Returns a summary of the projects in the server. If is_print is False , it will return a list of tuples like: [(name, project_id, total_nodes, total_links, status) ...]","title":"projects_summary"},{"location":"api_reference/#get_projects","text":"get_projects(self) Returns the list of the projects on the server","title":"get_projects"},{"location":"api_reference/#get_project","text":"get_project(self, name=None, project_id=None) Retrieves a project from either a name or ID Required Attributes: name or project_id","title":"get_project"},{"location":"api_reference/#templates_summary","text":"templates_summary(self, is_print=True) Returns a summary of the templates in the server. If is_print is False , it will return a list of tuples like: [(name, template_id, template_type, builtin, console_type, category) ...]","title":"templates_summary"},{"location":"api_reference/#get_templates","text":"get_templates(self) Returns the templates defined on the server.","title":"get_templates"},{"location":"api_reference/#get_template","text":"get_template(self, name=None, template_id=None) Retrieves a template from either a name or ID Required Attributes: name or template_id","title":"get_template"},{"location":"api_reference/#update_template","text":"update_template(self, name=None, template_id=None, **kwargs) Updates a template by giving its name or UUID. For more information [API INFO] (http://api.gns3.net/en/2.2/api/v2/controller/template/ templatestemplateid.html#put-v2-templates-template-id) Required Attributes: name or template_id","title":"update_template"},{"location":"api_reference/#create_template","text":"create_template(self, **kwargs) Creates a template by giving its attributes. For more information [API INFO] (http://api.gns3.net/en/2.2/api/v2/controller/template/ templates.html#post-v2-templates) Required Attributes: name compute_id by default is 'local' template_type","title":"create_template"},{"location":"api_reference/#delete_template","text":"delete_template(self, name=None, template_id=None) Deletes a template by giving its attributes. For more information [API INFO] (http://api.gns3.net/en/2.2/api/v2/controller/template/ templatestemplateid.html#id16) Required Attributes: name or template_id","title":"delete_template"},{"location":"api_reference/#get_nodes","text":"get_nodes(self, project_id) Retieves the nodes defined on the project Required Attributes: project_id","title":"get_nodes"},{"location":"api_reference/#get_node","text":"get_node(self, project_id, node_id) Returns the node by locating its ID. Required Attributes: project_id node_id","title":"get_node"},{"location":"api_reference/#get_links","text":"get_links(self, project_id) Retrieves the links defined in the project. Required Attributes: project_id","title":"get_links"},{"location":"api_reference/#get_link","text":"get_link(self, project_id, link_id) Returns the link by locating its ID. Required Attributes: project_id link_id","title":"get_link"},{"location":"api_reference/#create_project","text":"create_project(self, **kwargs) Pass a dictionary type object with the project parameters to be created. Required Attributes: name Returns JSON project information","title":"create_project"},{"location":"api_reference/#delete_project","text":"delete_project(self, project_id) Deletes a project from server. Required Attributes: project_id","title":"delete_project"},{"location":"api_reference/#get_computes","text":"get_computes(self) Returns a list of computes. Returns: List of dictionaries of the computes attributes like cpu/memory usage","title":"get_computes"},{"location":"api_reference/#get_compute","text":"get_compute(self, compute_id=\"local\") Returns a compute. Returns: Dictionary of the compute attributes like cpu/memory usage","title":"get_compute"},{"location":"api_reference/#get_compute_images","text":"get_compute_images(self, emulator, compute_id=\"local\") Returns a list of images available for a compute. Required Attributes: emulator : the likes of 'qemu', 'iou', 'docker' ... compute_id By default is 'local' Returns: List of dictionaries with images available for the compute for the specified emulator","title":"get_compute_images"},{"location":"api_reference/#upload_compute_image","text":"upload_compute_image(self, emulator, file_path, compute_id=\"local\") uploads an image for use by a compute. Required Attributes: emulator : the likes of 'qemu', 'iou', 'docker' ... file_path : path of file to be uploaded compute_id By default is 'local'","title":"upload_compute_image"},{"location":"api_reference/#get_compute_ports","text":"get_compute_ports(self, compute_id=\"local\") Returns ports used and configured by a compute. Required Attributes: compute_id By default is 'local' Returns: Dictionary of console_ports used and range, as well as the udp_ports","title":"get_compute_ports"},{"location":"api_reference/#get","text":"@verify_connector_and_id get(self) Retrieves the information from the link endpoint. Required Attributes: project_id connector link_id","title":"get"},{"location":"api_reference/#delete","text":"@verify_connector_and_id delete(self) Deletes a link endpoint from the project. It sets to None the attributes link_id when executed sucessfully Required Attributes: project_id connector link_id","title":"delete"},{"location":"api_reference/#create","text":"create(self) Creates a link endpoint Required Attributes: project_id connector nodes","title":"create"},{"location":"api_reference/#get_1","text":"@verify_connector_and_id get(self, get_links=True) Retrieves the node information. When get_links is True it also retrieves the links respective to the node. Required Attributes: project_id connector node_id","title":"get"},{"location":"api_reference/#get_links_1","text":"@verify_connector_and_id get_links(self) Retrieves the links of the respective node. They will be saved at the links attribute Required Attributes: project_id connector node_id","title":"get_links"},{"location":"api_reference/#start","text":"@verify_connector_and_id start(self) Starts the node. Required Attributes: project_id connector node_id","title":"start"},{"location":"api_reference/#stop","text":"@verify_connector_and_id stop(self) Stops the node. Required Attributes: project_id connector node_id","title":"stop"},{"location":"api_reference/#reload","text":"@verify_connector_and_id reload(self) Reloads the node. Required Attributes: project_id connector node_id","title":"reload"},{"location":"api_reference/#suspend","text":"@verify_connector_and_id suspend(self) Suspends the node. Required Attributes: project_id connector node_id","title":"suspend"},{"location":"api_reference/#update","text":"@verify_connector_and_id update(self, **kwargs) Updates the node instance by passing the keyword arguments of the attributes you want updated Example: router01.update(name=\"router01-CSX\") This will update the project auto_close attribute to True Required Attributes: project_id connector","title":"update"},{"location":"api_reference/#create_1","text":"create(self) Creates a node. By default it will fetch the nodes properties for creation based on the template or template_id attribute supplied. This can be overriden/updated by sending a dictionary of the properties under extra_properties . Required Node instance attributes: project_id connector compute_id : Defaults to \"local\" template or template_id - if not passed as arguments","title":"create"},{"location":"api_reference/#delete_1","text":"@verify_connector_and_id delete(self) Deletes the node from the project. It sets to None the attributes node_id and name when executed successfully Required Attributes: project_id connector node_id","title":"delete"},{"location":"api_reference/#get_file","text":"@verify_connector_and_id get_file(self, path) Retrieve a file in the node directory. Required Attributes: project_id connector path : Node's relative path of the file","title":"get_file"},{"location":"api_reference/#write_file","text":"@verify_connector_and_id write_file(self, path, data) Places a file content on a specified node file path. Used mainly for docker images. Example to update an alpine docker network interfaces: >>> data = ''' auto eth0 iface eth0 inet dhcp ''' >>> alpine_node.write_file(path='/etc/network/interfaces', data=data) Required Attributes: project_id connector path : Node's relative path of the file data : Data to be included in the file","title":"write_file"},{"location":"api_reference/#get_2","text":"get(self, get_links=True, get_nodes=True, get_stats=True) Retrieves the projects information. get_links : When true it also queries for the links inside the project get_nodes : When true it also queries for the nodes inside the project get_stats : When true it also queries for the stats inside the project It get_stats is set to True , it also verifies if snapshots and drawings are inside the project and stores them in their respective attributes ( snapshots and drawings ) Required Attributes: connector project_id or name","title":"get"},{"location":"api_reference/#create_2","text":"create(self) Creates the project. Required Attributes: name connector","title":"create"},{"location":"api_reference/#update_1","text":"@verify_connector_and_id update(self, **kwargs) Updates the project instance by passing the keyword arguments of the attributes you want updated Example: lab.update(auto_close=True) This will update the project auto_close attribute to True Required Attributes: project_id connector","title":"update"},{"location":"api_reference/#delete_2","text":"@verify_connector_and_id delete(self) Deletes the project from the server. It sets to None the attributes project_id and name when executed successfully Required Attributes: project_id connector","title":"delete"},{"location":"api_reference/#close","text":"@verify_connector_and_id close(self) Closes the project on the server. Required Attributes: project_id connector","title":"close"},{"location":"api_reference/#open","text":"@verify_connector_and_id open(self) Opens the project on the server. Required Attributes: project_id connector","title":"open"},{"location":"api_reference/#get_stats","text":"@verify_connector_and_id get_stats(self) Retrieve the stats of the project. Required Attributes: project_id connector","title":"get_stats"},{"location":"api_reference/#get_file_1","text":"@verify_connector_and_id get_file(self, path) Retrieve a file in the project directory. Beware you have warranty to be able to access only to file global to the project. Required Attributes: project_id connector path : Project's relative path of the file","title":"get_file"},{"location":"api_reference/#write_file_1","text":"@verify_connector_and_id write_file(self, path, data) Places a file content on a specified project file path. Beware you have warranty to be able to access only to file global to the project. Example to create a README.txt for the project: >>> data = ''' This is a README description! ''' >>> project.write_file(path='README.txt', data=data) Required Attributes: project_id connector path : Project's relative path of the file data : Data to be included in the file","title":"write_file"},{"location":"api_reference/#get_nodes_1","text":"@verify_connector_and_id get_nodes(self) Retrieve the nodes of the project. Required Attributes: project_id connector","title":"get_nodes"},{"location":"api_reference/#get_links_2","text":"@verify_connector_and_id get_links(self) Retrieve the links of the project. Required Attributes: project_id connector","title":"get_links"},{"location":"api_reference/#start_nodes","text":"@verify_connector_and_id start_nodes(self, poll_wait_time=5) Starts all the nodes inside the project. poll_wait_time is used as a delay when performing the next query of the nodes status. Required Attributes: project_id connector","title":"start_nodes"},{"location":"api_reference/#stop_nodes","text":"@verify_connector_and_id stop_nodes(self, poll_wait_time=5) Stops all the nodes inside the project. poll_wait_time is used as a delay when performing the next query of the nodes status. Required Attributes: project_id connector","title":"stop_nodes"},{"location":"api_reference/#reload_nodes","text":"@verify_connector_and_id reload_nodes(self, poll_wait_time=5) Reloads all the nodes inside the project. poll_wait_time is used as a delay when performing the next query of the nodes status. Required Attributes: project_id connector","title":"reload_nodes"},{"location":"api_reference/#suspend_nodes","text":"@verify_connector_and_id suspend_nodes(self, poll_wait_time=5) Suspends all the nodes inside the project. poll_wait_time is used as a delay when performing the next query of the nodes status. Required Attributes: project_id connector","title":"suspend_nodes"},{"location":"api_reference/#nodes_summary","text":"nodes_summary(self, is_print=True) Returns a summary of the nodes insode the project. If is_print is False , it will return a list of tuples like: [(node_name, node_status, node_console, node_id) ...] Required Attributes: project_id connector","title":"nodes_summary"},{"location":"api_reference/#nodes_inventory","text":"nodes_inventory(self) Returns an inventory-style dictionary of the nodes Example: { \"router01\": { \"server\": \"127.0.0.1\", \"name\": \"router01\", \"console_port\": 5077, \"type\": \"vEOS\" } } Required Attributes: project_id connector","title":"nodes_inventory"},{"location":"api_reference/#links_summary","text":"links_summary(self, is_print=True) Returns a summary of the links insode the project. If is_print is False, it will return a list of tuples like: [(node_a, port_a, node_b, port_b) ...] Required Attributes: project_id connector","title":"links_summary"},{"location":"api_reference/#get_node_1","text":"get_node(self, name=None, node_id=None) Returns the Node object by searching for the name or the node_id . Required Attributes: project_id connector Required keyword arguments: - name or node_id NOTE: Run method get_nodes() manually to refresh list of nodes if necessary","title":"get_node"},{"location":"api_reference/#get_link_1","text":"get_link(self, link_id) Returns the Link object by locating its ID Required Attributes: project_id connector link_id NOTE: Run method get_links() manually to refresh list of links if necessary","title":"get_link"},{"location":"api_reference/#create_node","text":"create_node(self, **kwargs) Creates a node. To know available parameters see Node object, specifically the create method. The most basic example would be: project.create_node(name='test-switch01', template='Ethernet switch') Required Project instance attributes: project_id connector Required keyword aguments: template or template_id","title":"create_node"},{"location":"api_reference/#create_link","text":"create_link(self, node_a, port_a, node_b, port_b) Creates a link. Required Attributes: project_id connector node_a : Node name of the A side port_a : Port name of the A side (must match the name attribute of the port) node_b : Node name of the B side port_b : Port name of the B side (must match the name attribute of the port)","title":"create_link"},{"location":"api_reference/#get_snapshots","text":"@verify_connector_and_id get_snapshots(self) Retrieves list of snapshots of the project Required Project instance attributes: project_id connector","title":"get_snapshots"},{"location":"api_reference/#get_snapshot","text":"get_snapshot(self, name=None, snapshot_id=None) Returns the Snapshot by searching for the name or the snapshot_id . Required Attributes: project_id connector Required keyword arguments: - name or snapshot_id","title":"get_snapshot"},{"location":"api_reference/#create_snapshot","text":"@verify_connector_and_id create_snapshot(self, name) Creates a snapshot of the project Required Project instance attributes: project_id connector Required keyword aguments: name","title":"create_snapshot"},{"location":"api_reference/#delete_snapshot","text":"@verify_connector_and_id delete_snapshot(self, name=None, snapshot_id=None) Deletes a snapshot of the project Required Project instance attributes: project_id connector Required keyword aguments: name or snapshot_id","title":"delete_snapshot"},{"location":"api_reference/#restore_snapshot","text":"@verify_connector_and_id restore_snapshot(self, name=None, snapshot_id=None) Restore a snapshot from disk Required Project instance attributes: project_id connector Required keyword aguments: name or snapshot_id","title":"restore_snapshot"},{"location":"api_reference/#arrange_nodes_circular","text":"arrange_nodes_circular(self, radius=120) Re-arrgange the existing nodes in a circular fashion Attributes: project instance created Example >>> proj = Project(name='project_name', connector=Gns3connector) >>> proj.arrange_nodes()","title":"arrange_nodes_circular"},{"location":"api_reference/#get_drawing","text":"get_drawing(self, drawing_id=None) Returns the drawing by searching for the svg or the drawing_id . Required Attributes: project_id connector Required keyword arguments: - svg or drawing_id","title":"get_drawing"},{"location":"api_reference/#get_drawings","text":"@verify_connector_and_id get_drawings(self) Retrieves list of drawings of the project Required Project instance attributes: project_id connector","title":"get_drawings"},{"location":"api_reference/#create_drawing","text":"@verify_connector_and_id create_drawing(self, svg, locked=False, x=10, y=10, z=1) Creates a drawing on the project Required Project instance attributes: project_id connector","title":"create_drawing"},{"location":"api_reference/#update_drawing","text":"@verify_connector_and_id update_drawing(self, drawing_id, svg=None, locked=None, x=None, y=None, z=None) Updates a drawing on the project Required Project instance attributes: project_id connector","title":"update_drawing"},{"location":"api_reference/#delete_drawing","text":"@verify_connector_and_id delete_drawing(self, drawing_id=None) Deletes a drawing of the project Required Project instance attributes: project_id connector Required keyword aguments: drawing_id","title":"delete_drawing"},{"location":"user-guide/","text":"How it works The library provide the following interfaces: Gns3Connector : Main object that interacts with the GNS3 server REST API and its objective is to be its interface. Project : Interface of a project/lab defined. Node : Interface of a node/entity defined. Link : Interface of a link defined. The Gns3Connector is mandatory and needs to be assigned to the Project , Node or Link object you want to work with, the latter uses the connector to interact with the REST API. Next you can see different ways to interact with the library. Interact with existing Project Gns3Connector and Project objects Here is an example of defining a connector object and a project that is already configured on a local GNS3 server: >>> from gns3fy import Gns3Connector, Project >>> from tabulate import tabulate >>> server = Gns3Connector(\"http://localhost:3080\") # To show the available projects on the server >>> print( tabulate( server.projects_summary(is_print=False), headers=[\"Project Name\", \"Project ID\", \"Total Nodes\", \"Total Links\", \"Status\"], ) ) \"\"\" Project Name Project ID Total Nodes Total Links Status -------------- ------------------------------------ ------------- ------------- -------- test2 c9dc56bf-37b9-453b-8f95-2845ce8908e3 10 9 opened API_TEST 4b21dfb3-675a-4efa-8613-2f7fb32e76fe 6 4 opened mpls-bgpv2 f5de5917-0ac5-4850-82b1-1d7e3c777fa1 30 40 closed \"\"\" >>> lab = Project(name=\"API_TEST\", connector=server) # Retrieve its information and display >>> lab.get() >>> print(lab) Project(project_id='4b21dfb3-675a-4efa-8613-2f7fb32e76fe', name='API_TEST', status='opened', ...) # Access the project attributes >>> print(f\"Name: {lab.name} -- Status: {lab.status} -- Is auto_closed?: {lab.auto_close}\") \"Name: API_TEST -- Status: closed -- Is auto_closed?: False\" # Open the project >>> lab.open() >>> lab.status opened # Verify the stats >>> lab.stats {'drawings': 0, 'links': 4, 'nodes': 6, 'snapshots': 0} # List the names and status of all the nodes in the project for node in lab.nodes: print(f\"Node: {node.name} -- Node Type: {node.node_type} -- Status: {node.status}\") \"\"\" Node: Ethernetswitch-1 -- Node Type: ethernet_switch -- Status: started ... \"\"\" As noted before you can also use the Gns3Connector as an interface object to the GNS3 server REST API. >>> server.get_version() {'local': False, 'version': '2.2.0b4'} >>> server.get_templates() [{'adapter_type': 'e1000', 'adapters': 13, 'bios_image': '', 'boot_priority': 'c', 'builtin': False, 'category': 'router', 'cdrom_image': '', 'compute_id': 'local', ... Node and Link objects You have access to the Node and Link objects as well, and this gives you the ability to start, stop, suspend the individual element in a GNS3 project. ... >>> PROJECT_ID = \"4b21dfb3-675a-4efa-8613-2f7fb32e76fe\" >>> alpine1 = Node(project_id=PROJECT_ID, name=\"alpine-1\", connector=server) >>> alpine1.get() >>> print(alpine1) Node(name='alpine-1', node_type='docker', node_directory= ...) # And you can access the attributes the same way as the project >>> print(f\"Name: {alpine1.name} -- Status: {alpine1.status} -- Console: {alpine1.console}\") \"Name: alpine-1 -- Status: started -- Console: 5005\" # Stop the node and start (you can just restart it as well) >>> alpine1.stop() >>> alpine1.status stopped >>> alpine1.start() >>> alpine1.status started # You can also see the Link objects assigned to this node >>> alpine1.links [Link(link_id='4d9f1235-7fd1-466b-ad26-0b4b08beb778', link_type='ethernet', ...)] # And in the same way you can interact with a Link object >>> link1 = alpine1.links[0] >>> print(f\"Link Type: {link1.link_type} -- Capturing?: {link1.capturing} -- Endpoints: {link1.nodes}\") Link Type: ethernet -- Capturing?: False -- Endpoints: [{'adapter_number': 2, ...}] Creating a new Project You can find here a couple of methods that are available on the interfaces provided by the library. To navigate to some of them and see their value, lets create a simple lab on the server with 2 nodes connected betweem each other. Project creation Lets start by creating a lab called test_lab ... >>> lab = Project(name=\"test_lab\", connector=server) >>> lab.create() >>> lab Project(project_id='e83f1275-3a6f-48f7-88ee-36386ee27a55', name='test_lab', status='opened',...) You can see you get the project_id . In GNS3 the project ID is key for all interactions under that project. Note For a complete list of the attibutes you can see the API Reference Node creation Next, lets try and create a Ethernet switch node. For this we need to know the template and node type of it. ... >>> for template in server.get_templates(): ...: if \"switch\" in template[\"name\"]: ...: print(f\"Template: {template['name']} -- ID: {template['template_id']}\") ...: \"\"\" Template: Ethernet switch -- ID: 1966b864-93e7-32d5-965f-001384eec461 Template: Frame Relay switch -- ID: dd0f6f3a-ba58-3249-81cb-a1dd88407a47 Template: ATM switch -- ID: aaa764e2-b383-300f-8a0e-3493bbfdb7d2 \"\"\" >>> server.get_template_by_name(\"Ethernet switch\") {'builtin': True, 'category': 'switch', 'console_type': 'none', 'name': 'Ethernet switch', 'symbol': ':/symbols/ethernet_switch.svg', 'template_id': '1966b864-93e7-32d5-965f-001384eec461', 'template_type': 'ethernet_switch'} By knowing the template information of the device we can create the Node instace of it ... >>> switch = Node( ...: project_id=lab.project_id, ...: connector=server, ...: name=\"Ethernet-switch\", ...: template=\"Ethernet switch\" ...:) >>> switch.create() >>> switch Node(name='Ethernet-switch', project_id='6e75bca5-3fa0-4219-a7cf-f82c0540fb73', node_id='c3607609-49'...) Note For a complete list of the attibutes you can see the API Reference Now lets add an docker Alpine host to the project ( NOTE: The docker image and template needs to be already configured in GNS3) ... >>> alpine = Node( ...: project_id=lab.project_id, ...: connector=server, ...: name=\"alpine-host\", ...: template=\"alpine\" ...:) >>> alpine.create() >>> alpine Node(name='alpine-host', project_id='6e75bca5-3fa0-4219-a7cf-f82c0540fb73', node_id='8c11eb8b'...) >>> alpine.properties {'adapters': 2, 'aux': 5026, 'category': 'guest', 'console_auto_start': False, 'console_http_path': '/', 'console_http_port': 80, 'console_resolution': '1024x768', 'console_type': 'telnet', 'container_id': 'f26b6aee763a9399c93c86032b75717c57b260e5010e88c4d410ce13554771df', 'custom_adapters': [], 'environment': '', 'extra_hosts': '', 'extra_volumes': [], 'image': 'alpine:latest', 'start_command': '', 'symbol': ':/symbols/affinity/circle/gray/docker.svg', 'usage': ''} >>> alpine.ports [{'adapter_number': 0, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'eth0', 'port_number': 0, 'short_name': 'eth0'}, {'adapter_number': 1, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'eth1', 'port_number': 0, 'short_name': 'eth1'}] You can access all of the host attributes and see their specifications based on the template defined on the server. To update the lab object with their latest nodes added ... >>> lab.get() # I have shorten the output shown >>> lab.nodes \"\"\" [Node(name='Ethernet-switch', project_id='6e75bca5-3fa0-4219-a7cf-f82c0540fb73', node_id='c3607609... Node(name='alpine-host1', project_id='6e75bca5-3fa0-4219-a7cf-f82c0540fb73', node_id='8c11eb8b... ] \"\"\" Link creation Next lets create a link between the switch and the alpine host. Switch Etherner0 <--> Alpine Eth1 ... >>> lab.create_link('Ethernet-switch', 'Ethernet0', 'alpine-host1', 'eth1') \"Created Link-ID: b0d0df11-8ed8-4d1d-98e4-3776c9b7bdce -- Type: ethernet\" >>> lab.links [Link(link_id='b0d0df11-8ed8-4d1d-98e4-3776c9b7bdce', link_type='ethernet', project_id='6e7'...)] Note For a complete list of the attibutes you can see the API Reference This is one way to create a link (using the lab object), but you can also create it using a Link instance as well. We need the link mapping to be set under the nodes attribute of the Link instance. For this we need: node_id adapter_number port_number ... >>> switch.ports [{'adapter_number': 0, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'Ethernet0', 'port_number': 0, 'short_name': 'e0'}, {'adapter_number': 0, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'Ethernet1', 'port_number': 1, 'short_name': 'e1'}, ... >>> alpine.ports [{'adapter_number': 0, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'eth0', 'port_number': 0, 'short_name': 'eth0'}, {'adapter_number': 1, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'eth1', 'port_number': 0, 'short_name': 'eth1'}] Gettings this information from both nodes we can create the Link. ... >>> nodes = [ dict(node_id=switch.node_id, adapter_number=0, port_number=1), dict(node_id=alpine.node_id, adapter_number=0, port_number=0) ] >>> extra_link = Link(project_id=lab.project_id, connector=server, nodes=nodes) >>> extra_link.create() >>> extra_link Link(link_id='edf38e1a-67e7-4060-8493-0e222ec22072', link_type='ethernet', project_id='6e75bca5'...) You can get the latest link information on the project ... >>> lab.get_links() # You can see the 2 links created earlier >>> lab.links [Link(link_id='b0d0df11-8ed8-4d1d-98e4-3776c9b7bdce', link_type='ethernet'... Link(link_id='=', link_type='ethernet'...] You can see the final result if you open the lab on your GNS3 client: Note The devices are all clustered together. This will be addressed in the future. For te moment you can re-arrange them the way you want Examples Here are some examples of what you can do with the library Manipulate a Node from a Project instance The Project object gives you all the nodes configured on it. This is typically saved under Project.nodes as a list of Node instances. When collecting the information of a project on a given time, you also retrieve by default all of its nodes. Each of the nodes are assigned the Gns3Connector by default if you follow the procedure below. ... >>> server = Gns3Connector(url=\"http://localhost:3080\")] >>> print(server) '<gns3fy.gns3fy.Gns3Connector at 0x10d4c8e10>' >>> lab = Project(name=\"lab\", connector=server) # Retrieve the lab information and print the amount of nodes configured >>> lab.get() >>> print(len(lab.nodes)) 2 # Assign one of the nodes to a varaible and start manipulating it >>> node_1 = lab.nodes[0] >>> print(node_1.status) 'stopped' >>> node_1.start() >>> print(node_1.status) 'started' >>> print(node_1.connector) '<gns3fy.gns3fy.Gns3Connector at 0x10d4c8e10>' node_1 has the same connector object as reference for interaction with the server. The same can be done with a Link by interacting with the Project.links attribute. Check existing templates and projects available The templates and projects configured on the GNS3 server can be viewed by using the templates_summary and projects_summary . ... >>> from tabulate import tabulate >>> templates_summary = server.templates_summary(is_print=False) >>> print( tabulate( server.templates_summary(is_print=False), headers=[ \"Template Name\", \"Template ID\", \"Type\", \"Builtin\", \"Console\", \"Category\", ], ) ) \"\"\" Template Name Template ID Type Builtin Console Category ------------------ ------------------------------------ ------------------ --------- --------- ---------- IOU-L3 8504c605-7914-4a8f-9cd4-a2638382db0e iou False telnet router IOU-L2 92cccfb2-6401-48f2-8964-3c75323be3cb iou False telnet switch vEOS c6203d4b-d0ce-4951-bf18-c44369d46804 qemu False telnet router alpine 847e5333-6ac9-411f-a400-89838584371b docker False telnet guest Cloud 39e257dc-8412-3174-b6b3-0ee3ed6a43e9 cloud True N/A guest NAT df8f4ea9-33b7-3e96-86a2-c39bc9bb649c nat True N/A guest VPCS 19021f99-e36f-394d-b4a1-8aaa902ab9cc vpcs True N/A guest Ethernet switch 1966b864-93e7-32d5-965f-001384eec461 ethernet_switch True none switch Ethernet hub b4503ea9-d6b6-3695-9fe4-1db3b39290b0 ethernet_hub True N/A switch Frame Relay switch dd0f6f3a-ba58-3249-81cb-a1dd88407a47 frame_relay_switch True N/A switch ATM switch aaa764e2-b383-300f-8a0e-3493bbfdb7d2 atm_switch True N/A switch \"\"\" >>> projects_summary = server.projects_summary(is_print=False) >>> print( tabulate( server.projects_summary(is_print=False), headers=[ \"Project Name\", \"Project ID\", \"Total Nodes\", \"Total Links\", \"Status\", ], ) ) \"\"\" Project name Project ID Total Nodes Total Links Status -------------- ------------------------------------ ------------- ------------- -------- mgmt_network c9dc56bf-37b9-453b-8f95-2845ce8908e3 10 9 opened ospf_lab 4b21dfb3-675a-4efa-8613-2f7fb32e76fe 6 4 opened [API] New test f5de5917-0ac5-4850-82b1-1d7e3c777fa1 0 0 closed test_ansible 5599f8f5-9074-4372-b20e-e96eb3bd27c6 4 4 opened \"\"\" Get Nodes and Links summary For a given project you can use nodes_summary and links_summary , that if used with a library like tabulate you can obtain the following: ... >>> from tabulate import tabulate >>> nodes_summary = lab.nodes_summary(is_print=False) >>> print( ... tabulate(nodes_summary, headers=[\"Node\", \"Status\", \"Console Port\", \"ID\"]) ... ) \"\"\" Node Status Console Port ID ---------------- -------- -------------- ------------------------------------ Ethernetswitch-1 started 5000 da28e1c0-9465-4f7c-b42c-49b2f4e1c64d IOU1 started 5001 de23a89a-aa1f-446a-a950-31d4bf98653c IOU2 started 5002 0d10d697-ef8d-40af-a4f3-fafe71f5458b vEOS-4.21.5F-1 started 5003 8283b923-df0e-4bc1-8199-be6fea40f500 alpine-1 started 5005 ef503c45-e998-499d-88fc-2765614b313e Cloud-1 started cde85a31-c97f-4551-9596-a3ed12c08498 \"\"\" >>> links_summary = lab.links_summary(is_print=False) >>> print( ... tabulate(links_summary, headers=[\"Node A\", \"Port A\", \"Node B\", \"Port B\"]) ... ) \"\"\" Node A Port A Node B Port B -------------- ----------- ---------------- ----------- IOU1 Ethernet1/0 IOU2 Ethernet1/0 vEOS-4.21.5F-1 Management1 Ethernetswitch-1 Ethernet0 vEOS-4.21.5F-1 Ethernet1 alpine-1 eth0 Cloud-1 eth1 Ethernetswitch-1 Ethernet7 \"\"\" I have shown the projects_summary earlier, here is another one that is helpful ... >>> print( tabulate( server.templates_summary(is_print=False), headers=[ \"Template Name\", \"Template ID\", \"Type\", \"Builtin\", \"Console\", \"Category\", ], ) ) \"\"\" Template Name Template ID Type Builtin Console Category ------------------ ------------------------------------ ------------------ --------- --------- ---------- IOU-L3 8504c605-7914-4a8f-9cd4-a2638382db0e iou False telnet router IOU-L2 92cccfb2-6401-48f2-8964-3c75323be3cb iou False telnet switch vEOS c6203d4b-d0ce-4951-bf18-c44369d46804 qemu False telnet router alpine 847e5333-6ac9-411f-a400-89838584371b docker False telnet guest Cloud 39e257dc-8412-3174-b6b3-0ee3ed6a43e9 cloud True N/A guest NAT df8f4ea9-33b7-3e96-86a2-c39bc9bb649c nat True N/A guest VPCS 19021f99-e36f-394d-b4a1-8aaa902ab9cc vpcs True N/A guest Ethernet switch 1966b864-93e7-32d5-965f-001384eec461 ethernet_switch True none switch Ethernet hub b4503ea9-d6b6-3695-9fe4-1db3b39290b0 ethernet_hub True N/A switch Frame Relay switch dd0f6f3a-ba58-3249-81cb-a1dd88407a47 frame_relay_switch True N/A switch ATM switch aaa764e2-b383-300f-8a0e-3493bbfdb7d2 atm_switch True N/A switch \"\"\" Migrate templates between GNS3 servers You may need to backup your current templates configuration of one server to another, or just want to standardize the templates used across your GNS3 server. Here is a simple script that shows an example of how to achive it with Gns3Connector . migrate_gns3_templates.py from gns3fy import Gns3Connector OLD_URL = \"http://gns3server01:3080\" NEW_URL = \"http://gns3server02:3080\" def main() # Define the server objects old_server = Gns3Connector(url=OLD_URL) new_server = Gns3Connector(url=NEW_URL) # Retrive their current templates old_server_templates = old_server.get_templates() new_server_templates = new_server.get_templates() # Now pass the templates for template in old_server_templates: # Bypass templates already configured on new server if any(template[\"name\"] == x[\"name\"] for x in new_server_templates): print(f\"Template: {template['name']} already present. Skipping...\") continue # Pass template new_server.create_template(**template) print(f\"Template: {template['name']} passed!\") if __name__ == '__main__': main() It can produce an output similar to this: python migrate_gns3_templates.py Template: vEOS-4.21.5F passed! Template: Junos vMX passed! Template: alpine passed! Template: Cloud already present. Skipping... Template: NAT already present. Skipping... Template: VPCS already present. Skipping... Template: Ethernet switch already present. Skipping... Template: Ethernet hub already present. Skipping... Template: Frame Relay switch already present. Skipping... Template: ATM switch already present. Skipping... Template: netautomator passed! Template: Cisco IOSv 15.7(3)M3 passed! Template: Cisco IOSvL2 15.2.1 passed! Template: Cisco IOSvL2 15.2(20170321:233949) passed! Template: Cisco IOS XRv 9000 6.5.1 passed! Template: Cisco IOS XRv 6.1.3 passed! Template: Cisco NX-OSv 7.3.0 passed! Template: Cisco ASAv 9.9.2 passed! Template: Cisco CSR1000v 16.9.4 passed! Template: Cumulus VX 3.7.8 passed! Template: Cisco NX-OSv 9000 7.0.3.I7.4 passed! Template: Arista vEOS 4.21.5F passed! Check server CPU and Memory usage You can use the get_compute method to retrieve information about the GNS3 server that is running the emulations. Here is an example of getting the CPU and Memory average usage for a period of time and use that information to determine if a hungre service router can be turned on. import time from gns3fy import Gns3Connector, Project server = Gns3Connector(url=\"http://gns3server\") lab = Project(name=\"test_lab\", connector=server) lab.get() hungry_router = lab.get_node(name=\"hungry_router\") # Get the CPU and Memory usage and calculate its average cpu_usage = [] memory_usage = [] for index in range(5): compute_attrs = server.get_compute(compute_id=\"local\") cpu_usage.append(compute_attrs.get(\"cpu_usage_percent\")) memory_usage.append(compute_attrs.get(\"memory_usage_percent\")) time.sleep(1) cpu_avg = round(sum(cpu_usage) / len(cpu_usage), 2) mem_avg = round(sum(memory_usage) / len(memory_usage), 2) # If CPU is less than 40% and Memory is less than 50% turnup the nodes if cpu_avg <= 40.0 and mem_avg <= 50.0: hungry_router.start() print(\"All good! starting hungry router\") else: print( f\"Hungry router does not have enough resources. CPU avg: {cpu_avg}%\" f\" Memory avg: {mem_avg}%\" ) Create and list project snapshots There is an attribute called snapshots under the Project instance, which stores snapshots information about that project. You can create, delete and also search for specific snapshots of a project. See the API reference Here is a snippet that creates and shows information about the snapshots configured on a project. from datetime import datetime from gns3fy import Gns3Connector, Project lab = Project(name=\"test3\", connector=Gns3Connector(url=\"http://gns3server01:3080\")) lab.get() # Create snapshot lab.create_snapshot(name=\"snap3\") # Show configured snapshots for snapshot in lab.snapshots: _time = datetime.utcfromtimestamp(snapshot['created_at']).strftime('%Y-%m-%d %H:%M:%S') print(f\"Snapshot: {snapshot['name']}, created at: {_time}\") It prints something similar to this: Created snapshot: snap3 Snapshot: snap1, created at: 2019-09-28 20:59:50 Snapshot: snap2, created at: 2019-09-28 20:59:54 Snapshot: snap3, created at: 2019-09-29 08:44:28","title":"User Guide"},{"location":"user-guide/#interact-with-existing-project","text":"","title":"Interact with existing Project"},{"location":"user-guide/#gns3connector-and-project-objects","text":"Here is an example of defining a connector object and a project that is already configured on a local GNS3 server: >>> from gns3fy import Gns3Connector, Project >>> from tabulate import tabulate >>> server = Gns3Connector(\"http://localhost:3080\") # To show the available projects on the server >>> print( tabulate( server.projects_summary(is_print=False), headers=[\"Project Name\", \"Project ID\", \"Total Nodes\", \"Total Links\", \"Status\"], ) ) \"\"\" Project Name Project ID Total Nodes Total Links Status -------------- ------------------------------------ ------------- ------------- -------- test2 c9dc56bf-37b9-453b-8f95-2845ce8908e3 10 9 opened API_TEST 4b21dfb3-675a-4efa-8613-2f7fb32e76fe 6 4 opened mpls-bgpv2 f5de5917-0ac5-4850-82b1-1d7e3c777fa1 30 40 closed \"\"\" >>> lab = Project(name=\"API_TEST\", connector=server) # Retrieve its information and display >>> lab.get() >>> print(lab) Project(project_id='4b21dfb3-675a-4efa-8613-2f7fb32e76fe', name='API_TEST', status='opened', ...) # Access the project attributes >>> print(f\"Name: {lab.name} -- Status: {lab.status} -- Is auto_closed?: {lab.auto_close}\") \"Name: API_TEST -- Status: closed -- Is auto_closed?: False\" # Open the project >>> lab.open() >>> lab.status opened # Verify the stats >>> lab.stats {'drawings': 0, 'links': 4, 'nodes': 6, 'snapshots': 0} # List the names and status of all the nodes in the project for node in lab.nodes: print(f\"Node: {node.name} -- Node Type: {node.node_type} -- Status: {node.status}\") \"\"\" Node: Ethernetswitch-1 -- Node Type: ethernet_switch -- Status: started ... \"\"\" As noted before you can also use the Gns3Connector as an interface object to the GNS3 server REST API. >>> server.get_version() {'local': False, 'version': '2.2.0b4'} >>> server.get_templates() [{'adapter_type': 'e1000', 'adapters': 13, 'bios_image': '', 'boot_priority': 'c', 'builtin': False, 'category': 'router', 'cdrom_image': '', 'compute_id': 'local', ...","title":"Gns3Connector and Project objects"},{"location":"user-guide/#node-and-link-objects","text":"You have access to the Node and Link objects as well, and this gives you the ability to start, stop, suspend the individual element in a GNS3 project. ... >>> PROJECT_ID = \"4b21dfb3-675a-4efa-8613-2f7fb32e76fe\" >>> alpine1 = Node(project_id=PROJECT_ID, name=\"alpine-1\", connector=server) >>> alpine1.get() >>> print(alpine1) Node(name='alpine-1', node_type='docker', node_directory= ...) # And you can access the attributes the same way as the project >>> print(f\"Name: {alpine1.name} -- Status: {alpine1.status} -- Console: {alpine1.console}\") \"Name: alpine-1 -- Status: started -- Console: 5005\" # Stop the node and start (you can just restart it as well) >>> alpine1.stop() >>> alpine1.status stopped >>> alpine1.start() >>> alpine1.status started # You can also see the Link objects assigned to this node >>> alpine1.links [Link(link_id='4d9f1235-7fd1-466b-ad26-0b4b08beb778', link_type='ethernet', ...)] # And in the same way you can interact with a Link object >>> link1 = alpine1.links[0] >>> print(f\"Link Type: {link1.link_type} -- Capturing?: {link1.capturing} -- Endpoints: {link1.nodes}\") Link Type: ethernet -- Capturing?: False -- Endpoints: [{'adapter_number': 2, ...}]","title":"Node and Link objects"},{"location":"user-guide/#creating-a-new-project","text":"You can find here a couple of methods that are available on the interfaces provided by the library. To navigate to some of them and see their value, lets create a simple lab on the server with 2 nodes connected betweem each other.","title":"Creating a new Project"},{"location":"user-guide/#project-creation","text":"Lets start by creating a lab called test_lab ... >>> lab = Project(name=\"test_lab\", connector=server) >>> lab.create() >>> lab Project(project_id='e83f1275-3a6f-48f7-88ee-36386ee27a55', name='test_lab', status='opened',...) You can see you get the project_id . In GNS3 the project ID is key for all interactions under that project. Note For a complete list of the attibutes you can see the API Reference","title":"Project creation"},{"location":"user-guide/#node-creation","text":"Next, lets try and create a Ethernet switch node. For this we need to know the template and node type of it. ... >>> for template in server.get_templates(): ...: if \"switch\" in template[\"name\"]: ...: print(f\"Template: {template['name']} -- ID: {template['template_id']}\") ...: \"\"\" Template: Ethernet switch -- ID: 1966b864-93e7-32d5-965f-001384eec461 Template: Frame Relay switch -- ID: dd0f6f3a-ba58-3249-81cb-a1dd88407a47 Template: ATM switch -- ID: aaa764e2-b383-300f-8a0e-3493bbfdb7d2 \"\"\" >>> server.get_template_by_name(\"Ethernet switch\") {'builtin': True, 'category': 'switch', 'console_type': 'none', 'name': 'Ethernet switch', 'symbol': ':/symbols/ethernet_switch.svg', 'template_id': '1966b864-93e7-32d5-965f-001384eec461', 'template_type': 'ethernet_switch'} By knowing the template information of the device we can create the Node instace of it ... >>> switch = Node( ...: project_id=lab.project_id, ...: connector=server, ...: name=\"Ethernet-switch\", ...: template=\"Ethernet switch\" ...:) >>> switch.create() >>> switch Node(name='Ethernet-switch', project_id='6e75bca5-3fa0-4219-a7cf-f82c0540fb73', node_id='c3607609-49'...) Note For a complete list of the attibutes you can see the API Reference Now lets add an docker Alpine host to the project ( NOTE: The docker image and template needs to be already configured in GNS3) ... >>> alpine = Node( ...: project_id=lab.project_id, ...: connector=server, ...: name=\"alpine-host\", ...: template=\"alpine\" ...:) >>> alpine.create() >>> alpine Node(name='alpine-host', project_id='6e75bca5-3fa0-4219-a7cf-f82c0540fb73', node_id='8c11eb8b'...) >>> alpine.properties {'adapters': 2, 'aux': 5026, 'category': 'guest', 'console_auto_start': False, 'console_http_path': '/', 'console_http_port': 80, 'console_resolution': '1024x768', 'console_type': 'telnet', 'container_id': 'f26b6aee763a9399c93c86032b75717c57b260e5010e88c4d410ce13554771df', 'custom_adapters': [], 'environment': '', 'extra_hosts': '', 'extra_volumes': [], 'image': 'alpine:latest', 'start_command': '', 'symbol': ':/symbols/affinity/circle/gray/docker.svg', 'usage': ''} >>> alpine.ports [{'adapter_number': 0, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'eth0', 'port_number': 0, 'short_name': 'eth0'}, {'adapter_number': 1, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'eth1', 'port_number': 0, 'short_name': 'eth1'}] You can access all of the host attributes and see their specifications based on the template defined on the server. To update the lab object with their latest nodes added ... >>> lab.get() # I have shorten the output shown >>> lab.nodes \"\"\" [Node(name='Ethernet-switch', project_id='6e75bca5-3fa0-4219-a7cf-f82c0540fb73', node_id='c3607609... Node(name='alpine-host1', project_id='6e75bca5-3fa0-4219-a7cf-f82c0540fb73', node_id='8c11eb8b... ] \"\"\"","title":"Node creation"},{"location":"user-guide/#link-creation","text":"Next lets create a link between the switch and the alpine host. Switch Etherner0 <--> Alpine Eth1 ... >>> lab.create_link('Ethernet-switch', 'Ethernet0', 'alpine-host1', 'eth1') \"Created Link-ID: b0d0df11-8ed8-4d1d-98e4-3776c9b7bdce -- Type: ethernet\" >>> lab.links [Link(link_id='b0d0df11-8ed8-4d1d-98e4-3776c9b7bdce', link_type='ethernet', project_id='6e7'...)] Note For a complete list of the attibutes you can see the API Reference This is one way to create a link (using the lab object), but you can also create it using a Link instance as well. We need the link mapping to be set under the nodes attribute of the Link instance. For this we need: node_id adapter_number port_number ... >>> switch.ports [{'adapter_number': 0, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'Ethernet0', 'port_number': 0, 'short_name': 'e0'}, {'adapter_number': 0, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'Ethernet1', 'port_number': 1, 'short_name': 'e1'}, ... >>> alpine.ports [{'adapter_number': 0, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'eth0', 'port_number': 0, 'short_name': 'eth0'}, {'adapter_number': 1, 'data_link_types': {'Ethernet': 'DLT_EN10MB'}, 'link_type': 'ethernet', 'name': 'eth1', 'port_number': 0, 'short_name': 'eth1'}] Gettings this information from both nodes we can create the Link. ... >>> nodes = [ dict(node_id=switch.node_id, adapter_number=0, port_number=1), dict(node_id=alpine.node_id, adapter_number=0, port_number=0) ] >>> extra_link = Link(project_id=lab.project_id, connector=server, nodes=nodes) >>> extra_link.create() >>> extra_link Link(link_id='edf38e1a-67e7-4060-8493-0e222ec22072', link_type='ethernet', project_id='6e75bca5'...) You can get the latest link information on the project ... >>> lab.get_links() # You can see the 2 links created earlier >>> lab.links [Link(link_id='b0d0df11-8ed8-4d1d-98e4-3776c9b7bdce', link_type='ethernet'... Link(link_id='=', link_type='ethernet'...] You can see the final result if you open the lab on your GNS3 client: Note The devices are all clustered together. This will be addressed in the future. For te moment you can re-arrange them the way you want","title":"Link creation"},{"location":"user-guide/#examples","text":"Here are some examples of what you can do with the library","title":"Examples"},{"location":"user-guide/#manipulate-a-node-from-a-project-instance","text":"The Project object gives you all the nodes configured on it. This is typically saved under Project.nodes as a list of Node instances. When collecting the information of a project on a given time, you also retrieve by default all of its nodes. Each of the nodes are assigned the Gns3Connector by default if you follow the procedure below. ... >>> server = Gns3Connector(url=\"http://localhost:3080\")] >>> print(server) '<gns3fy.gns3fy.Gns3Connector at 0x10d4c8e10>' >>> lab = Project(name=\"lab\", connector=server) # Retrieve the lab information and print the amount of nodes configured >>> lab.get() >>> print(len(lab.nodes)) 2 # Assign one of the nodes to a varaible and start manipulating it >>> node_1 = lab.nodes[0] >>> print(node_1.status) 'stopped' >>> node_1.start() >>> print(node_1.status) 'started' >>> print(node_1.connector) '<gns3fy.gns3fy.Gns3Connector at 0x10d4c8e10>' node_1 has the same connector object as reference for interaction with the server. The same can be done with a Link by interacting with the Project.links attribute.","title":"Manipulate a Node from a Project instance"},{"location":"user-guide/#check-existing-templates-and-projects-available","text":"The templates and projects configured on the GNS3 server can be viewed by using the templates_summary and projects_summary . ... >>> from tabulate import tabulate >>> templates_summary = server.templates_summary(is_print=False) >>> print( tabulate( server.templates_summary(is_print=False), headers=[ \"Template Name\", \"Template ID\", \"Type\", \"Builtin\", \"Console\", \"Category\", ], ) ) \"\"\" Template Name Template ID Type Builtin Console Category ------------------ ------------------------------------ ------------------ --------- --------- ---------- IOU-L3 8504c605-7914-4a8f-9cd4-a2638382db0e iou False telnet router IOU-L2 92cccfb2-6401-48f2-8964-3c75323be3cb iou False telnet switch vEOS c6203d4b-d0ce-4951-bf18-c44369d46804 qemu False telnet router alpine 847e5333-6ac9-411f-a400-89838584371b docker False telnet guest Cloud 39e257dc-8412-3174-b6b3-0ee3ed6a43e9 cloud True N/A guest NAT df8f4ea9-33b7-3e96-86a2-c39bc9bb649c nat True N/A guest VPCS 19021f99-e36f-394d-b4a1-8aaa902ab9cc vpcs True N/A guest Ethernet switch 1966b864-93e7-32d5-965f-001384eec461 ethernet_switch True none switch Ethernet hub b4503ea9-d6b6-3695-9fe4-1db3b39290b0 ethernet_hub True N/A switch Frame Relay switch dd0f6f3a-ba58-3249-81cb-a1dd88407a47 frame_relay_switch True N/A switch ATM switch aaa764e2-b383-300f-8a0e-3493bbfdb7d2 atm_switch True N/A switch \"\"\" >>> projects_summary = server.projects_summary(is_print=False) >>> print( tabulate( server.projects_summary(is_print=False), headers=[ \"Project Name\", \"Project ID\", \"Total Nodes\", \"Total Links\", \"Status\", ], ) ) \"\"\" Project name Project ID Total Nodes Total Links Status -------------- ------------------------------------ ------------- ------------- -------- mgmt_network c9dc56bf-37b9-453b-8f95-2845ce8908e3 10 9 opened ospf_lab 4b21dfb3-675a-4efa-8613-2f7fb32e76fe 6 4 opened [API] New test f5de5917-0ac5-4850-82b1-1d7e3c777fa1 0 0 closed test_ansible 5599f8f5-9074-4372-b20e-e96eb3bd27c6 4 4 opened \"\"\"","title":"Check existing templates and projects available"},{"location":"user-guide/#get-nodes-and-links-summary","text":"For a given project you can use nodes_summary and links_summary , that if used with a library like tabulate you can obtain the following: ... >>> from tabulate import tabulate >>> nodes_summary = lab.nodes_summary(is_print=False) >>> print( ... tabulate(nodes_summary, headers=[\"Node\", \"Status\", \"Console Port\", \"ID\"]) ... ) \"\"\" Node Status Console Port ID ---------------- -------- -------------- ------------------------------------ Ethernetswitch-1 started 5000 da28e1c0-9465-4f7c-b42c-49b2f4e1c64d IOU1 started 5001 de23a89a-aa1f-446a-a950-31d4bf98653c IOU2 started 5002 0d10d697-ef8d-40af-a4f3-fafe71f5458b vEOS-4.21.5F-1 started 5003 8283b923-df0e-4bc1-8199-be6fea40f500 alpine-1 started 5005 ef503c45-e998-499d-88fc-2765614b313e Cloud-1 started cde85a31-c97f-4551-9596-a3ed12c08498 \"\"\" >>> links_summary = lab.links_summary(is_print=False) >>> print( ... tabulate(links_summary, headers=[\"Node A\", \"Port A\", \"Node B\", \"Port B\"]) ... ) \"\"\" Node A Port A Node B Port B -------------- ----------- ---------------- ----------- IOU1 Ethernet1/0 IOU2 Ethernet1/0 vEOS-4.21.5F-1 Management1 Ethernetswitch-1 Ethernet0 vEOS-4.21.5F-1 Ethernet1 alpine-1 eth0 Cloud-1 eth1 Ethernetswitch-1 Ethernet7 \"\"\" I have shown the projects_summary earlier, here is another one that is helpful ... >>> print( tabulate( server.templates_summary(is_print=False), headers=[ \"Template Name\", \"Template ID\", \"Type\", \"Builtin\", \"Console\", \"Category\", ], ) ) \"\"\" Template Name Template ID Type Builtin Console Category ------------------ ------------------------------------ ------------------ --------- --------- ---------- IOU-L3 8504c605-7914-4a8f-9cd4-a2638382db0e iou False telnet router IOU-L2 92cccfb2-6401-48f2-8964-3c75323be3cb iou False telnet switch vEOS c6203d4b-d0ce-4951-bf18-c44369d46804 qemu False telnet router alpine 847e5333-6ac9-411f-a400-89838584371b docker False telnet guest Cloud 39e257dc-8412-3174-b6b3-0ee3ed6a43e9 cloud True N/A guest NAT df8f4ea9-33b7-3e96-86a2-c39bc9bb649c nat True N/A guest VPCS 19021f99-e36f-394d-b4a1-8aaa902ab9cc vpcs True N/A guest Ethernet switch 1966b864-93e7-32d5-965f-001384eec461 ethernet_switch True none switch Ethernet hub b4503ea9-d6b6-3695-9fe4-1db3b39290b0 ethernet_hub True N/A switch Frame Relay switch dd0f6f3a-ba58-3249-81cb-a1dd88407a47 frame_relay_switch True N/A switch ATM switch aaa764e2-b383-300f-8a0e-3493bbfdb7d2 atm_switch True N/A switch \"\"\"","title":"Get Nodes and Links summary"},{"location":"user-guide/#migrate-templates-between-gns3-servers","text":"You may need to backup your current templates configuration of one server to another, or just want to standardize the templates used across your GNS3 server. Here is a simple script that shows an example of how to achive it with Gns3Connector . migrate_gns3_templates.py from gns3fy import Gns3Connector OLD_URL = \"http://gns3server01:3080\" NEW_URL = \"http://gns3server02:3080\" def main() # Define the server objects old_server = Gns3Connector(url=OLD_URL) new_server = Gns3Connector(url=NEW_URL) # Retrive their current templates old_server_templates = old_server.get_templates() new_server_templates = new_server.get_templates() # Now pass the templates for template in old_server_templates: # Bypass templates already configured on new server if any(template[\"name\"] == x[\"name\"] for x in new_server_templates): print(f\"Template: {template['name']} already present. Skipping...\") continue # Pass template new_server.create_template(**template) print(f\"Template: {template['name']} passed!\") if __name__ == '__main__': main() It can produce an output similar to this: python migrate_gns3_templates.py Template: vEOS-4.21.5F passed! Template: Junos vMX passed! Template: alpine passed! Template: Cloud already present. Skipping... Template: NAT already present. Skipping... Template: VPCS already present. Skipping... Template: Ethernet switch already present. Skipping... Template: Ethernet hub already present. Skipping... Template: Frame Relay switch already present. Skipping... Template: ATM switch already present. Skipping... Template: netautomator passed! Template: Cisco IOSv 15.7(3)M3 passed! Template: Cisco IOSvL2 15.2.1 passed! Template: Cisco IOSvL2 15.2(20170321:233949) passed! Template: Cisco IOS XRv 9000 6.5.1 passed! Template: Cisco IOS XRv 6.1.3 passed! Template: Cisco NX-OSv 7.3.0 passed! Template: Cisco ASAv 9.9.2 passed! Template: Cisco CSR1000v 16.9.4 passed! Template: Cumulus VX 3.7.8 passed! Template: Cisco NX-OSv 9000 7.0.3.I7.4 passed! Template: Arista vEOS 4.21.5F passed!","title":"Migrate templates between GNS3 servers"},{"location":"user-guide/#check-server-cpu-and-memory-usage","text":"You can use the get_compute method to retrieve information about the GNS3 server that is running the emulations. Here is an example of getting the CPU and Memory average usage for a period of time and use that information to determine if a hungre service router can be turned on. import time from gns3fy import Gns3Connector, Project server = Gns3Connector(url=\"http://gns3server\") lab = Project(name=\"test_lab\", connector=server) lab.get() hungry_router = lab.get_node(name=\"hungry_router\") # Get the CPU and Memory usage and calculate its average cpu_usage = [] memory_usage = [] for index in range(5): compute_attrs = server.get_compute(compute_id=\"local\") cpu_usage.append(compute_attrs.get(\"cpu_usage_percent\")) memory_usage.append(compute_attrs.get(\"memory_usage_percent\")) time.sleep(1) cpu_avg = round(sum(cpu_usage) / len(cpu_usage), 2) mem_avg = round(sum(memory_usage) / len(memory_usage), 2) # If CPU is less than 40% and Memory is less than 50% turnup the nodes if cpu_avg <= 40.0 and mem_avg <= 50.0: hungry_router.start() print(\"All good! starting hungry router\") else: print( f\"Hungry router does not have enough resources. CPU avg: {cpu_avg}%\" f\" Memory avg: {mem_avg}%\" )","title":"Check server CPU and Memory usage"},{"location":"user-guide/#create-and-list-project-snapshots","text":"There is an attribute called snapshots under the Project instance, which stores snapshots information about that project. You can create, delete and also search for specific snapshots of a project. See the API reference Here is a snippet that creates and shows information about the snapshots configured on a project. from datetime import datetime from gns3fy import Gns3Connector, Project lab = Project(name=\"test3\", connector=Gns3Connector(url=\"http://gns3server01:3080\")) lab.get() # Create snapshot lab.create_snapshot(name=\"snap3\") # Show configured snapshots for snapshot in lab.snapshots: _time = datetime.utcfromtimestamp(snapshot['created_at']).strftime('%Y-%m-%d %H:%M:%S') print(f\"Snapshot: {snapshot['name']}, created at: {_time}\") It prints something similar to this: Created snapshot: snap3 Snapshot: snap1, created at: 2019-09-28 20:59:50 Snapshot: snap2, created at: 2019-09-28 20:59:54 Snapshot: snap3, created at: 2019-09-29 08:44:28","title":"Create and list project snapshots"},{"location":"about/changelog/","text":"Upgrading and releases history pip install -U gns3fy Releases 0.7.0 Enhancement: Ability to manipulate SVGs. Added new methods: create_drawing , update_drawing , delete_drawing and get_drawing . Ref #66 Added a drawing_utils.py module that have some helper functions to generate SVGs in the Project: generate_rectangle_svg , generate_line_svg and generate_ellipse_svg . Also parsed_x and parsed_y that helps positions the Nodes and drawings in the canvas. Python 3.8 support. Ref #68 Added upload_compute_image to the Gns3Connector object. Thanks @skeiffer for the contribution. Ref #62 Fix: Fixes issue closing Project. Ref #71 Update poetry and fix CI. Ref #64 0.6.0 Enhancement: Added drawings attribute. Used to gather information from Drawing endpoint, and for that there is also the get_drawings method. Added arrange_nodes_circular method, which as the name indicates it will arrange the nodes configured on a project in a circular fashion. Thanks @Krlosromero for the contribution. 0.5.2 Enhancement: Added restore_snapshot to the available snapshot methods of a project 0.5.1 Fix: Argument specification for project snapshot methods Cred argument for user-based authentication with a GNS3 server 0.5.0 New features: Extended templates functionality with create_template , update_template and delete_template . Which can be used for migrating templates between GNS3 servers Added compute endpoint get method from the REST API. Compute endpoint get_computes : Retrieves attributes and characteristics of the GNS3 server compute that will run the emulations. get_compute_images : Lists images configured for a specific emulator on a compute. get_compute_ports : Lists configured and used console ports and UDP ports on a compute. Added projects snapshots attribute and methods. Snapshots endpoint snapshots : Attribute that stores snapshots names, IDs and created times of a project. Updated by the get_snapshots method. get_snapshot : Retrieves an specific snapshot information. create_snapshot and delete_snapshot : Creates/Delete an specific snapshot 0.4.1 Fix: Dependency of python to start at version 3.6 0.4.0 New features: Added get_file and write_file methods to Node and Project . Useful for interacting with files that reside on the server like README files, /etc/network/interfaces file for docker nodes, among other cases Fix: A \"template not found\" message, when creating a Node specifiying a missing/wrong template name. 0.3.0 Enhancement: tox for pipeline testing. PR-15 projects_summary and templates_summary methods for Gns3Connector . PR-17 Improved nodes_inventory method. PR-23 Refactor of Node creation, basically changed the API endpoint from Node to Template. PR-27 0.2.0 New features: Ability to create Project , Node and Link instances Created most of the methods to interact with the REST API Endpoints. Added some commodity methods like nodes_summary Created the docs Improved the tests and coverage Added CircleCI with the following checks: flake8 black formatting pytest 0.1.1 Enhancement: Adding Gns3Connector method get_version 0.1.0 Initial Push","title":"Release Notes"},{"location":"about/changelog/#releases","text":"","title":"Releases"},{"location":"about/changelog/#070","text":"Enhancement: Ability to manipulate SVGs. Added new methods: create_drawing , update_drawing , delete_drawing and get_drawing . Ref #66 Added a drawing_utils.py module that have some helper functions to generate SVGs in the Project: generate_rectangle_svg , generate_line_svg and generate_ellipse_svg . Also parsed_x and parsed_y that helps positions the Nodes and drawings in the canvas. Python 3.8 support. Ref #68 Added upload_compute_image to the Gns3Connector object. Thanks @skeiffer for the contribution. Ref #62 Fix: Fixes issue closing Project. Ref #71 Update poetry and fix CI. Ref #64","title":"0.7.0"},{"location":"about/changelog/#060","text":"Enhancement: Added drawings attribute. Used to gather information from Drawing endpoint, and for that there is also the get_drawings method. Added arrange_nodes_circular method, which as the name indicates it will arrange the nodes configured on a project in a circular fashion. Thanks @Krlosromero for the contribution.","title":"0.6.0"},{"location":"about/changelog/#052","text":"Enhancement: Added restore_snapshot to the available snapshot methods of a project","title":"0.5.2"},{"location":"about/changelog/#051","text":"Fix: Argument specification for project snapshot methods Cred argument for user-based authentication with a GNS3 server","title":"0.5.1"},{"location":"about/changelog/#050","text":"New features: Extended templates functionality with create_template , update_template and delete_template . Which can be used for migrating templates between GNS3 servers Added compute endpoint get method from the REST API. Compute endpoint get_computes : Retrieves attributes and characteristics of the GNS3 server compute that will run the emulations. get_compute_images : Lists images configured for a specific emulator on a compute. get_compute_ports : Lists configured and used console ports and UDP ports on a compute. Added projects snapshots attribute and methods. Snapshots endpoint snapshots : Attribute that stores snapshots names, IDs and created times of a project. Updated by the get_snapshots method. get_snapshot : Retrieves an specific snapshot information. create_snapshot and delete_snapshot : Creates/Delete an specific snapshot","title":"0.5.0"},{"location":"about/changelog/#041","text":"Fix: Dependency of python to start at version 3.6","title":"0.4.1"},{"location":"about/changelog/#040","text":"New features: Added get_file and write_file methods to Node and Project . Useful for interacting with files that reside on the server like README files, /etc/network/interfaces file for docker nodes, among other cases Fix: A \"template not found\" message, when creating a Node specifiying a missing/wrong template name.","title":"0.4.0"},{"location":"about/changelog/#030","text":"Enhancement: tox for pipeline testing. PR-15 projects_summary and templates_summary methods for Gns3Connector . PR-17 Improved nodes_inventory method. PR-23 Refactor of Node creation, basically changed the API endpoint from Node to Template. PR-27","title":"0.3.0"},{"location":"about/changelog/#020","text":"New features: Ability to create Project , Node and Link instances Created most of the methods to interact with the REST API Endpoints. Added some commodity methods like nodes_summary Created the docs Improved the tests and coverage Added CircleCI with the following checks: flake8 black formatting pytest","title":"0.2.0"},{"location":"about/changelog/#011","text":"Enhancement: Adding Gns3Connector method get_version","title":"0.1.1"},{"location":"about/changelog/#010","text":"Initial Push","title":"0.1.0"},{"location":"about/license/","text":"MIT License Copyright (c) 2019 David Flores Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}